name: Codacy Coverage Reporter

on:
  # Triggers the workflow on push or pull request events
  push:
    branches: 
    - main
    - developer
  pull_request:
    branches: 
    - main

jobs:
  codacy-coverage-reporter:
    # The type of runner that the job will run on
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: codacy-coverage-reporter,
            os: ubuntu-latest,
            build_type: "Debug",
            cc: "clang-14",
            cxx: "clang++-14",
            generator: "Unix Makefiles",
            boost: "OFF",
            coverage: "ON"
          }

    steps:
      - name: Get Branch Name
        id: branch-name
        uses: tj-actions/branch-names@v6

      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Print Event
        run: |
          echo github.event.action: ${{ github.event.action }}
          echo github.event_name: ${{ github.event_name }}

      - name: Install Dependencies Linux
        run: |
          sudo apt-get update
          sudo apt-get install cmake
          sudo apt-get install gcc-11 g++-11
          sudo apt-get install clang-14
          sudo apt-get install lcov
          cmake    --version
          gcc      --version
          gcc-11   --version
          clang-14 --version
          lcov     --version
          git clone --recurse-submodules -b ${{ steps.branch-name.outputs.current_branch }} https://github.com/pirlruc/infrastructure.git  modules/infrastructure

      - name: Restore Build Cache
        if: ${{ steps.branch-name.outputs.current_branch }} == 'developer'
        id: restore-build-cache
        uses: actions/cache/restore@v3
        with:
          path: |
            build/*
            external/*
            test/external/*
            modules/infrastructure/external/*
          key: ${{ matrix.config.os }}-build-${{ matrix.config.cxx }}-${{ matrix.config.build_type }}-boost_${{ matrix.config.boost }}-coverage_${{ matrix.config.coverage }}-tests_ON-${{ hashFiles('CMakeLists.txt','test/CMakeLists.txt') }}
          restore-keys: |
            ${{ matrix.config.os }}-build-${{ matrix.config.cxx }}-${{ matrix.config.build_type }}-boost_${{ matrix.config.boost }}-coverage_${{ matrix.config.coverage }}-tests_ON-

      - name: Clean Build Folder
        if: steps.restore-build-cache.outputs.cache-hit != 'true' || ${{ steps.branch-name.outputs.current_branch }} != 'developer'
        shell: bash
        run: |
          rm -rf build
          mkdir build

      - name: Configure
        shell: bash
        run: |
          cmake \
            -S . \
            -B build \
            -DCMAKE_BUILD_TYPE=${{ matrix.config.build_type }} \
            -DCMAKE_C_COMPILER=${{ matrix.config.cc }} \
            -DCMAKE_CXX_COMPILER=${{ matrix.config.cxx }} \
            -DIMPROC_WITH_BOOST=${{ matrix.config.boost }} \
            -DIMPROC_WITH_COVERAGE=${{ matrix.config.coverage }} \
            -DIMPROC_SERVICES_WITH_TESTS=ON \
            -G "${{ matrix.config.generator }}"

      - name: Build
        shell: bash
        run: cmake --build build --config ${{ matrix.config.build_type }} --target all

      - name: Save Build Cache
        if: ${{ steps.branch-name.outputs.current_branch }} == 'developer'
        id: save-build-cache
        uses: actions/cache/save@v3
        with:
          path: |
            build/*
            external/*
            test/external/*
            modules/infrastructure/external/*
          key: ${{ matrix.config.os }}-build-${{ matrix.config.cxx }}-${{ matrix.config.build_type }}-boost_${{ matrix.config.boost }}-coverage_${{ matrix.config.coverage }}-tests_ON-${{ hashFiles('CMakeLists.txt','test/CMakeLists.txt') }}

      - name: Code Coverage Report
        shell: bash
        run: |
          cd build/bin
          ./improc_services_testd --gtest_output="xml:improc_services_tests.xml"
          cd ..
          make improc_services_coverage

      - name: Unit Tests Report 
        uses: EnricoMi/publish-unit-test-result-action@v2.4.1
        if: always()
        with:
          check_name: "unit-tests-report"
          time_unit: milliseconds
          files: |
            build/**/improc_services_tests.xml

      - name: Run codacy-coverage-reporter
        uses: codacy/codacy-coverage-reporter-action@v1.3.0
        with:
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
          coverage-reports: ./build/improc_services_coverage.lcov
