name: Ubuntu Build

on:
  # Triggers the workflow on push or pull request events
  push:
    branches: 
    - main
    - developer
    - feature-os

  # Runs this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build:
    # The type of runner that the job will run on
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: ubuntu-latest-gcc,
            os: ubuntu-latest,
            preset_name: "gcc-debug",
            binary_dir: "out/build/gcc-debug"
          }
        - {
            name: ubuntu-latest-clang,
            os: ubuntu-latest,
            preset_name: "clang-debug",
            binary_dir: "out/build/clang-debug"
          }
        - {
            name: ubuntu-latest-gcc-no-toolchain,
            os: ubuntu-latest,
            preset_name: "gcc-debug-no-toolchain",
            binary_dir: "out/build/gcc-debug-no-toolchain"
          }
        - {
            name: ubuntu-latest-clang-no-toolchain,
            os: ubuntu-latest,
            preset_name: "clang-debug-no-toolchain",
            binary_dir: "out/build/clang-debug-no-toolchain"
          }
          
    steps:
      - name: Get Branch Name
        id: branch-name
        shell: bash
        run: echo "branch=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT
        
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Print Event
        run: |
          echo github.event.action: ${{ github.event.action }}
          echo github.event_name: ${{ github.event_name }}
          echo github.branch: ${{ steps.branch-name.outputs.branch }}
          
      - name: Install Dependencies
        run: |
          sudo apt-get install ninja-build
          sudo apt-get install lcov
          ninja    --version
          cmake    --version
          gcc      --version
          gcc-11   --version
          clang    --version
          clang-14 --version
          lcov     --version
          vcpkg    --version

      - name: Restore Build Cache
        id: restore-build-cache
        uses: actions/cache/restore@v4
        with:
          path: |
            out/*
            build/*
            external/*
            test/external/*
            modules/infrastructure/external/*
          key: ${{ matrix.config.os }}-build-${{ matrix.config.preset_name }}-${{ hashFiles('CMakeLists.txt','test/CMakeLists.txt') }}
          restore-keys: |
            ${{ matrix.config.os }}-build-${{ matrix.config.preset_name }}

      - name: Clean Build Folder
        if: steps.restore-build-cache.outputs.cache-hit != 'true'
        shell: bash
        run: |
          rm -rf out
          rm -rf build
          mkdir build

      - name: Configure & Build
        shell: bash
        run: |
          export VCPKG_ROOT=/usr/local/share/vcpkg
          cmake --preset ${{ matrix.config.preset_name }}
          cmake --build --preset ${{ matrix.config.preset_name }} --target all

      - if: ${{ steps.branch-name.outputs.branch == 'developer' }}
        name: Save Build Cache
        id: save-build-cache
        uses: actions/cache/save@v4
        with:
          path: |
            out/*
            build/*
            external/*
            test/external/*
            modules/infrastructure/external/*
          key: ${{ matrix.config.os }}-build-${{ matrix.config.preset_name }}-${{ hashFiles('CMakeLists.txt','test/CMakeLists.txt') }}

      - name: Test
        shell: bash
        run: ./${{ matrix.config.binary_dir }}/bin/improc_services_testd
